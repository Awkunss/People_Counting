#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
People Counting System - Main Dispatcher
H·ªá th·ªëng ƒë·∫øm ng∆∞·ªùi v·ªõi hai ph∆∞∆°ng ph√°p: Line v√† Zone
"""

import argparse
import sys

# Import c√°c module counting
try:
    from line_counting import line_counter
    from zone_counting import zone_counter
except ImportError as e:
    print(f"‚ùå L·ªói import: {e}")
    sys.exit(1)

class PeopleCountingDispatcher:
    """L·ªõp ƒëi·ªÅu ph·ªëi ƒë∆°n gi·∫£n cho h·ªá th·ªëng ƒë·∫øm ng∆∞·ªùi"""
    
    def __init__(self):
        self.methods = ['line', 'zone']
    
    def show_methods_info(self):
        """Hi·ªÉn th·ªã th√¥ng tin v·ªÅ c√°c ph∆∞∆°ng ph√°p counting"""
        print("\n" + "="*50)
        print("üîç PEOPLE COUNTING SYSTEM")
        print("="*50)
        print("üìä LINE: ƒê·∫øm ng∆∞·ªùi qua ƒë∆∞·ªùng th·∫≥ng")
        print("üè¢ ZONE: ƒê·∫øm ng∆∞·ªùi trong v√πng khu v·ª±c")
        print("\nüí° Usage:")
        print("  python main.py --method line --video Test.mp4")
        print("  python main.py --method zone --video 0")
        print("="*50)
    
    def dispatch(self, method: str, video_path: str, model_path: str) -> None:
        """ƒêi·ªÅu ph·ªëi ch·∫°y ph∆∞∆°ng ph√°p counting"""
        print(f"\nüöÄ Starting {method.upper()} counting...")
        
        # Chuy·ªÉn ƒë·ªïi camera ID n·∫øu c·∫ßn
        if video_path.isdigit():
            video_path = int(video_path)
        
        # Ch·∫°y ph∆∞∆°ng ph√°p t∆∞∆°ng ·ª©ng
        if method == 'line':
            line_counter(video_path=video_path, model=model_path)
        elif method == 'zone':
            zone_counter(video_path=video_path, model=model_path)
        else:
            print(f"‚ùå Unknown method: {method}")
            print(f"‚úÖ Available: {self.methods}")

def create_argument_parser() -> argparse.ArgumentParser:
    """T·∫°o argument parser ƒë∆°n gi·∫£n"""
    parser = argparse.ArgumentParser(description="üîç People Counting System")
    
    parser.add_argument('--method', '-m', 
                       choices=['line', 'zone'], 
                       default='line',
                       help='Ph∆∞∆°ng ph√°p: line ho·∫∑c zone')
    
    parser.add_argument('--video', '-v', 
                       type=str, 
                       default='Test.mp4',
                       help='Video file ho·∫∑c camera ID (0, 1, 2...)')
    
    parser.add_argument('--model', 
                       type=str, 
                       default='yolov8s.pt',
                       help='YOLO model file')
    
    parser.add_argument('--show-methods', 
                       action='store_true',
                       help='Hi·ªÉn th·ªã th√¥ng tin methods')
    
    return parser

def main():
    """H√†m main ƒë∆°n gi·∫£n"""
    parser = create_argument_parser()
    args = parser.parse_args()
    
    dispatcher = PeopleCountingDispatcher()
    
    # Hi·ªÉn th·ªã methods info n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
    if args.show_methods:
        dispatcher.show_methods_info()
        return
    
    # Ch·∫°y dispatcher
    try:
        dispatcher.dispatch(args.method, args.video, args.model)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  D·ª´ng b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"\n‚ùå L·ªói: {e}")

if __name__ == "__main__":
    main()