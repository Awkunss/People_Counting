#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
People Counting Web Server - Flask + Socket.IO
H·ªá th·ªëng ƒë·∫øm ng∆∞·ªùi v·ªõi giao di·ªán web realtime
"""

import cv2
import base64
import numpy as np
from flask import Flask, render_template
from flask_socketio import SocketIO, emit
import threading
import time
import queue
import sys
import os
from datetime import datetime
import traceback

# Add paths for imports
current_dir = os.path.dirname(__file__)
app_dir = os.path.dirname(current_dir)
config_dir = os.path.join(app_dir, '..', 'config')
templates_dir = os.path.join(app_dir, '..', 'templates')

sys.path.insert(0, config_dir)
sys.path.insert(0, current_dir)

# Import configuration
from config.settings import WEB_HOST, WEB_PORT, WEB_DEBUG, get_model_path, get_video_path

# Import web counting modules
try:
    from line_counting_web import LineCounterWeb
    from zone_counting_web import ZoneCounterWeb
except ImportError as e:
    print(f"‚ùå L·ªói import web modules: {e}")
    print("üìù T·∫°o c√°c web modules...")

app = Flask(__name__, template_folder=templates_dir)
app.config['SECRET_KEY'] = 'people_counting_secret_key_2024'
socketio = SocketIO(app, cors_allowed_origins="*", async_mode='threading')

# Global variables
current_counter = None
is_running = False
stats_queue = queue.Queue()
log_queue = queue.Queue()

class WebLogger:
    """Logger ƒë·ªÉ g·ª≠i log realtime qua Socket.IO"""
    
    def __init__(self, socketio_instance):
        self.socketio = socketio_instance
    
    def log(self, level, message):
        """G·ª≠i log message"""
        try:
            self.socketio.emit('log_message', {
                'level': level,
                'message': message,
                'timestamp': datetime.now().strftime('%H:%M:%S')
            })
        except Exception as e:
            print(f"Logging error: {e}")
    
    def info(self, message):
        self.log('info', f"‚ÑπÔ∏è {message}")
    
    def warning(self, message):
        self.log('warning', f"‚ö†Ô∏è {message}")
    
    def error(self, message):
        self.log('error', f"‚ùå {message}")
    
    def success(self, message):
        self.log('info', f"‚úÖ {message}")

logger = WebLogger(socketio)

@app.route('/')
def index():
    """Trang ch√≠nh"""
    return render_template('index.html')

@socketio.on('connect')
def handle_connect():
    """X·ª≠ l√Ω k·∫øt n·ªëi client"""
    logger.success('Client ƒë√£ k·∫øt n·ªëi')
    emit('system_status', {'status': 'stopped', 'message': 'ƒê√£ d·ª´ng'})

@socketio.on('disconnect')
def handle_disconnect():
    """X·ª≠ l√Ω ng·∫Øt k·∫øt n·ªëi client"""
    logger.warning('Client ƒë√£ ng·∫Øt k·∫øt n·ªëi')

@socketio.on('start_counting')
def handle_start_counting(data):
    """B·∫Øt ƒë·∫ßu counting"""
    global current_counter, is_running
    
    try:
        if is_running:
            logger.warning('H·ªá th·ªëng ƒëang ch·∫°y!')
            return
        
        method = data.get('method', 'line')
        video_path = data.get('video', 'Test.mp4')
        model_path = data.get('model', 'yolov8s.pt')
        
        # Chuy·ªÉn ƒë·ªïi camera ID n·∫øu c·∫ßn
        if video_path.isdigit():
            video_path = int(video_path)
        
        print(f"üöÄ Starting counting - Method: {method}, Video: {video_path}, Model: {model_path}")  # Debug log
        logger.info(f'Kh·ªüi ƒë·ªông {method} counting v·ªõi {model_path}')
        
        # T·∫°o counter instance
        if method == 'line':
            current_counter = LineCounterWeb(
                video_path=video_path,
                model_path=model_path,
                socketio=socketio,
                logger=logger
            )
            # B·∫Øt ƒë·∫ßu counting trong thread ri√™ng
            counting_thread = threading.Thread(target=run_counting)
            counting_thread.daemon = True
            counting_thread.start()
        elif method == 'zone':
            print("üè¢ Creating ZoneCounterWeb instance...")  # Debug log
            # S·ª≠ d·ª•ng ZoneCounterWeb
            current_counter = ZoneCounterWeb(
                video_path=video_path,
                model_path=model_path,
                socketio=socketio,
                logger=logger
            )
            print("‚úÖ ZoneCounterWeb created, starting thread...")  # Debug log
            # B·∫Øt ƒë·∫ßu counting trong thread ri√™ng
            counting_thread = threading.Thread(target=run_counting)
            counting_thread.daemon = True
            counting_thread.start()
        else:
            logger.error(f'Ph∆∞∆°ng ph√°p kh√¥ng h·ªó tr·ª£: {method}')
            return
        
        is_running = True
        emit('system_status', {'status': 'running', 'message': f'ƒêang ch·∫°y {method}'})
        logger.success(f'ƒê√£ b·∫Øt ƒë·∫ßu {method} counting')
        
    except Exception as e:
        logger.error(f'L·ªói kh·ªüi ƒë·ªông: {str(e)}')
        emit('system_status', {'status': 'stopped', 'message': 'L·ªói kh·ªüi ƒë·ªông'})

@socketio.on('stop_counting')
def handle_stop_counting():
    """D·ª´ng counting"""
    global current_counter, is_running
    
    try:
        if not is_running:
            logger.warning('H·ªá th·ªëng ch∆∞a ch·∫°y!')
            return
        
        is_running = False
        if current_counter:
            current_counter.stop()
            current_counter = None
        
        emit('system_status', {'status': 'stopped', 'message': 'ƒê√£ d·ª´ng'})
        logger.success('ƒê√£ d·ª´ng h·ªá th·ªëng')
        
    except Exception as e:
        logger.error(f'L·ªói d·ª´ng h·ªá th·ªëng: {str(e)}')

@socketio.on('set_drawing_points')
def handle_set_drawing_points(data):
    """Thi·∫øt l·∫≠p ƒëi·ªÉm v·∫Ω cho line/zone"""
    global current_counter
    
    try:
        print(f"DEBUG: Received set_drawing_points: {data}")
        
        method = data.get('method')
        points = data.get('points', [])
        
        print(f"DEBUG: Method={method}, Points count={len(points)}")
        
        # Chuy·ªÉn ƒë·ªïi points th√†nh format ph√π h·ª£p
        converted_points = [(point['x'], point['y']) for point in points]
        print(f"DEBUG: Converted points: {converted_points}")
        
        if method == 'line' and len(converted_points) >= 2:
            if current_counter and hasattr(current_counter, 'set_line_points'):
                current_counter.set_line_points(converted_points[:2])
                logger.success(f'ƒê√£ thi·∫øt l·∫≠p ƒë∆∞·ªùng ƒë·∫øm: {converted_points[:2]}')
            else:
                logger.error('Counter kh√¥ng h·ªó tr·ª£ set_line_points')
        elif method == 'zone' and len(converted_points) >= 3:
            # S·ª≠ d·ª•ng ZoneCounterWeb set_zone_points
            if current_counter and hasattr(current_counter, 'set_zone_points'):
                current_counter.set_zone_points(converted_points)
                logger.success(f'ƒê√£ thi·∫øt l·∫≠p v√πng ƒë·∫øm: {len(converted_points)} ƒëi·ªÉm')
            else:
                logger.error('Counter kh√¥ng h·ªó tr·ª£ set_zone_points')
        else:
            logger.error(f'S·ªë ƒëi·ªÉm kh√¥ng h·ª£p l·ªá cho {method}: {len(converted_points)}')
        
    except Exception as e:
        logger.error(f'L·ªói thi·∫øt l·∫≠p drawing: {str(e)}')
        print(f"DEBUG: Exception in set_drawing_points: {e}")

@socketio.on('clear_drawing')
def handle_clear_drawing():
    """X√≥a drawing hi·ªán t·∫°i"""
    global current_counter
    
    try:
        print("DEBUG: Received clear_drawing")
        
        if current_counter:
            if hasattr(current_counter, 'clear_drawing'):
                current_counter.clear_drawing()
                logger.info('ƒê√£ x√≥a drawing')
            else:
                logger.error('Counter kh√¥ng h·ªó tr·ª£ clear_drawing')
        else:
            logger.error('Kh√¥ng c√≥ counter ƒëang ch·∫°y')
    except Exception as e:
        logger.error(f'L·ªói x√≥a drawing: {str(e)}')
        print(f"DEBUG: Exception in clear_drawing: {e}")

@socketio.on('reset_system')
def handle_reset_system():
    """Reset h·ªá th·ªëng"""
    global current_counter
    
    try:
        if current_counter:
            current_counter.reset()
        
        # Reset stats
        emit('stats_update', {
            'in_count': 0,
            'out_count': 0,
            'zone_count': 0
        })
        
        logger.success('ƒê√£ reset h·ªá th·ªëng')
        
    except Exception as e:
        logger.error(f'L·ªói reset: {str(e)}')

def run_counting():
    """Ch·∫°y counting trong thread ri√™ng"""
    global current_counter, is_running
    
    try:
        print("üèÉ run_counting() started...")  # Debug log
        if current_counter:
            print(f"‚úÖ Found counter instance: {type(current_counter).__name__}")  # Debug log
            current_counter.run()
        else:
            print("‚ùå No counter instance found!")  # Debug log
    except Exception as e:
        print(f"‚ùå Error in run_counting: {e}")  # Debug log
        logger.error(f'L·ªói counting: {str(e)}')
        logger.error(f'Traceback: {traceback.format_exc()}')
    finally:
        is_running = False
        socketio.emit('system_status', {'status': 'stopped', 'message': 'ƒê√£ d·ª´ng'})

def encode_frame(frame):
    """Encode frame th√†nh base64 ƒë·ªÉ g·ª≠i qua Socket.IO"""
    try:
        # L∆∞u k√≠ch th∆∞·ªõc g·ªëc
        original_height, original_width = frame.shape[:2]
        
        # Resize frame n·∫øu qu√° l·ªõn ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô
        display_frame = frame.copy()
        scale_factor = 1.0
        
        if original_width > 800:
            scale_factor = 800 / original_width
            new_width = int(original_width * scale_factor)
            new_height = int(original_height * scale_factor)
            display_frame = cv2.resize(display_frame, (new_width, new_height))
        
        # Encode th√†nh JPEG
        ret, buffer = cv2.imencode('.jpg', display_frame, [cv2.IMWRITE_JPEG_QUALITY, 70])
        if ret:
            frame_bytes = base64.b64encode(buffer).decode('utf-8')
            
            # Tr·∫£ v·ªÅ c·∫£ frame v√† metadata
            return {
                'image': frame_bytes,
                'original_size': {
                    'width': original_width,
                    'height': original_height
                },
                'display_size': {
                    'width': display_frame.shape[1],
                    'height': display_frame.shape[0]
                },
                'scale_factor': scale_factor
            }
    except Exception as e:
        print(f"Encode frame error: {e}")
    return None

if __name__ == '__main__':
    print("="*60)
    print("üåê PEOPLE COUNTING WEB SERVER")
    print("="*60)
    print("üöÄ Starting Flask + Socket.IO server...")
    print("üåç URL: http://localhost:5000")
    print("üì± Mobile access: http://<your-ip>:5000")
    print("="*60)
    
    try:
        # T·∫°o c√°c web modules n·∫øu ch∆∞a c√≥
        if not os.path.exists('line_counting_web.py'):
            print("üìù T·∫°o line_counting_web.py...")
            # Code s·∫Ω ƒë∆∞·ª£c t·∫°o sau
        
        if not os.path.exists('zone_counting_new.py'):
            print("üìù T·∫°o zone_counting_new.py...")
            # Code s·∫Ω ƒë∆∞·ª£c t·∫°o sau
        
        socketio.run(app, host='0.0.0.0', port=5000, debug=False)
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Server ƒë√£ d·ª´ng")
    except Exception as e:
        print(f"\n‚ùå L·ªói server: {e}")
